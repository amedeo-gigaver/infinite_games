name: Deploy to DEVELOP Server

on:
  push:
    branches:
      - develop

jobs:
  build_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_PUBLIC_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_PRIVATE_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Git Commit Short Hash
        id: git-info
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)"
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push the Docker image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/infinite_games:neuron-dev-latest
          build-args: |
            GIT_COMMIT_HASH=${{ env.COMMIT_HASH }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_validator:
    needs: [build_push_image]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y python3-pip

      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Deploy to server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_STAGE_VALI_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_STAGE_PRIVATE_KEY }}"
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_STAGE_VALI_IP }} -p ${{ secrets.SERVER_PORT }} << 'EOF'
          export AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          docker-compose -f docker-compose.dev.yaml down --rmi all
          EOF
          scp -P ${{ secrets.SERVER_PORT }} docker-compose.dev.yaml root@${{ secrets.SERVER_STAGE_VALI_IP }}:/root/docker-compose.dev.yaml
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_STAGE_VALI_IP }} -p ${{ secrets.SERVER_PORT }} << EOF
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ECR_PUBLIC_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ECR_PRIVATE_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_ECR_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          export AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          export API_ACCESS_KEYS=${{ secrets.API_ACCESS_KEYS_DEV }}
          docker-compose -f docker-compose.dev.yaml up -d if_validator_develop
          EOF

  deploy_miner:
    needs: [build_push_image]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y python3-pip openssh-client

      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Deploy to server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_STAGE_MINER_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_STAGE_MINER_IP }} -p ${{ secrets.SERVER_PORT }} << 'EOF'
          export AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          docker-compose -f docker-compose.dev.yaml down --rmi all
          EOF
          scp -P ${{ secrets.SERVER_PORT }} docker-compose.dev.yaml root@${{ secrets.SERVER_STAGE_MINER_IP }}:/root/docker-compose.dev.yaml
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_STAGE_MINER_IP }} -p ${{ secrets.SERVER_PORT }} << EOF
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ECR_PUBLIC_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ECR_PRIVATE_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_ECR_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          export AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          export API_ACCESS_KEYS=not_needed
          docker-compose -f docker-compose.dev.yaml up -d if_miner_develop
          EOF

  discord_alerts:
    runs-on: ubuntu-latest

    needs: [build_push_image, deploy_validator, deploy_miner]

    if: always()

    steps:
      - name: Alert build image failure
        if: needs.build_push_image.result == 'failure'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Build image DEVELOP failed"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL

      - name: Alert validator deployment failure
        if: needs.deploy_validator.result == 'failure'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Deploy validator DEVELOP failed"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL

      - name: Alert miner deployment failure
        if: needs.deploy_miner.result == 'failure'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Deploy miner DEVELOP failed"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL

      - name: Alert deployments completed
        if: needs.deploy_validator.result == 'success' && needs.deploy_miner.result == 'success'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Deploy validator/miner DEVELOP complete"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL
